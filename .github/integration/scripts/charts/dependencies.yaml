apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: cert-manager
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: selfsigned-ca
  namespace: cert-manager
spec:
  isCA: true
  commonName: selfsigned-ca
  secretName: root-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: cert-issuer
  namespace: cert-manager
spec:
  ca:
    secretName: root-secret
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: minio-cert
  namespace: minio
spec:
  secretName: minio-cert
  duration: 24h
  commonName: minio
  isCA: false
  privateKey:
    algorithm: ECDSA
    size: 256
  usages:
    - server auth
  dnsNames:
    - localhost
    - minio
    - minio.minio.svc
    - minio.minio.svc.cluster.local
  ipAddresses:
    - 127.0.0.1
  issuerRef:
    name: cert-issuer
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: ClusterIssuer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oidc-server
spec:
  selector:
    matchLabels:
      app: oidc-server
  replicas: 1
  template:
    metadata:
      labels:
        app: oidc-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: oidc-server
        image: ghcr.io/neicnordic/sensitive-data-archive:oidc
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
          - mountPath: /shared/keys
            name: jwt
      volumes:
        - name: jwt
          secret:
            defaultMode: 288
            secretName: jwk
---
apiVersion: v1
kind: Service
metadata:
  name: oidc
  labels:
    app: oidc-server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: oidc-server
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: archive-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: inbox-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cega-nss
spec:
  selector:
    matchLabels:
      app: cega-nss
  replicas: 1
  template:
    metadata:
      labels:
        app: cega-nss
    spec:
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: cega-nss
        image: egarchive/lega-base:release.v0.2.0
        command: ["python", "/cega/users.py", "0.0.0.0", "8443", "/cega/users.json"]
        env:
          - name: CEGA_USERS_PASSWORD
            value: test
          - name: CEGA_USERS_USER
            value: test
        ports:
        - containerPort: 8443
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
          - mountPath: /cega
            name: app
      volumes:
        - name: app
          configMap:
            name: cega-nss
---
apiVersion: v1
kind: Service
metadata:
  name: cega-nss
  labels:
    app: cega-nss
spec:
  type: ClusterIP
  ports:
  - port: 8443
    targetPort: 8443
  selector:
    app: cega-nss
