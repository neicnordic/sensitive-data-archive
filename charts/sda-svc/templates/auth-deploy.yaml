{{- if or (or (eq "all" .Values.global.deploymentType) (eq "external" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
{{- if eq "s3" .Values.global.inbox.storageType }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sda.fullname" . }}-auth
  labels:
    role: auth
    app: {{ template "sda.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ template "sda.fullname" . }}-auth
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.auth.replicaCount }}
  revisionHistoryLimit: {{ default "3" .Values.global.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "sda.fullname" . }}-auth
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.fullname" . }}-auth
        role: auth
        release: {{ .Release.Name }}
      annotations:
        {{- if not .Values.global.vaultSecrets }}
        checksum/secret: {{ include (print $.Template.BasePath "/auth-secrets.yaml") . | sha256sum }}
        {{- end }}
{{- if .Values.global.podAnnotations }}
{{- toYaml .Values.global.podAnnotations | nindent 8 -}}
{{- end }}
{{- if .Values.auth.annotations }}
{{- toYaml .Values.auth.annotations | nindent 8 -}}
{{- end }}
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        whenUnsatisfiable: DoNotSchedule
        topologyKey: kubernetes.io/hostname
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ template "sda.fullname" . }}-auth
            topologyKey: kubernetes.io/hostname
    {{- if .Values.global.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: auth
        image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
{{- if .Values.global.extraSecurityContext }}
{{- toYaml .Values.global.extraSecurityContext | nindent 10 -}}
{{- end }}
        command: ["sda-auth"]
        env:
        - name: CONFIGFILE
          value: {{ include "confFile" . }}
        ports:
        - name: auth
          containerPort: 8080
          protocol: TCP
        livenessProbe:
{{ toYaml .Values.auth.livenessProbe | trim | indent 10 }}
        readinessProbe:
{{ toYaml .Values.auth.readinessProbe | trim | indent 10 }}
        resources:
{{ toYaml .Values.auth.resources | trim | indent 10 }}
        volumeMounts:
      {{- if .Values.global.tls.enabled }}
        - name: tls
          mountPath: {{ template "tlsPath" . }}
      {{- end }}
      {{- if and (.Values.global.auth.resignJwt) (not .Values.global.vaultSecrets) }}
        - name: jwt
          mountPath: {{ template "jwtPath" . }}
      {{- end }}
      {{- if not .Values.global.vaultSecrets }}
        - name: config
          mountPath: {{ template "configPath" . }}
        - name: c4gh
          mountPath: {{ template "c4ghPath" . }}
      {{- end }}
      enableServiceLinks: false
      volumes:
      {{- if not .Values.global.vaultSecrets }}
        {{- if and (.Values.global.auth.resignJwt) (not .Values.global.vaultSecrets) }}
        - name: jwt
          projected:
            defaultMode: 0440
            sources:
            - secret:
                name: {{ required "A secret for the JWT signing key is needed" .Values.global.auth.jwtSecret }}
                items:
                  - key: {{ required "The name of the JWT signing key is needed" .Values.global.auth.jwtKey }}
                    path: {{ .Values.global.auth.jwtKey }}
        {{- end }}
        - name: config
          secret:
            defaultMode: 0440
            secretName: {{ template "sda.fullname" . }}-auth
        - name: c4gh
          secret:
            defaultMode: 0440
            secretName: {{ required "A secret for the C4GH public key is needed" .Values.global.c4gh.secretName }}
            items:
              - key: {{ required "The C4GH public key is needed" .Values.global.c4gh.publicKey }}
                path: {{ .Values.global.c4gh.publicKey }}
      {{- end }}
      {{- if and (not .Values.global.pkiService) .Values.global.tls.enabled }}
        - name: tls
        {{- if or .Values.global.tls.clusterIssuer .Values.global.tls.issuer }}
          secret:
            defaultMode: 0440
            secretName: {{ template "sda.fullname" . }}-auth-certs
        {{- else }}
          secret:
            defaultMode: 0440
            secretName: {{ required "An certificate issuer or a TLS secret name is required for auth" .Values.auth.tls.secretName }}
        {{- end }}
      {{- end }}
{{- end }}
{{- end }}
