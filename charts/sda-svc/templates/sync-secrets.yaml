{{- if eq "isolated" .Values.global.schemaType }}
{{- if ne "" .Values.global.sync.remote.host }}
{{- if or (or (eq "all" .Values.global.deploymentType) (eq "internal" .Values.global.deploymentType) ) (not .Values.global.deploymentType)}}
{{- if not .Values.global.vaultSecrets }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "sda.fullname" . }}-sync
type: Opaque
stringData:
  config.yaml: |-
    archive:
      type: {{ required "Archive storage type is not set" .Values.global.archive.storageType }}
    {{- if eq "s3" .Values.global.archive.storageType }}
      accessKey: {{ required "Accesskey required for archive" .Values.global.archive.s3AccessKey }}
      bucket: {{ required "S3 archive bucket not set" .Values.global.archive.s3Bucket }}
      {{- if and .Values.global.archive.s3CaFile .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      {{ end }}
      chunksize: {{ default 15 .Values.global.archive.s3ChunkSize }}
      {{- if .Values.global.archive.s3Port }}
      port: {{ .Values.global.archive.s3Port }}
      {{- end }}
      readypath: {{ .Values.global.archive.s3ReadyPath }}
      secretKey: {{ required "Secretkey required for archive" .Values.global.archive.s3SecretKey }}
      url: {{ required "S3 archive URL missing" .Values.global.archive.s3Url }}
    {{- else }}
      location: /archive/
    {{- end }}
    broker:
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      {{- if .Values.global.broker.verifyPeer }}
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
      {{- end }}
    {{- end }}
      exchange: {{ default "sda" .Values.global.broker.exchange }}
      host: {{ required "A valid MQ host is required" .Values.global.broker.host }}
      port: {{ default (ternary 5671 5672 .Values.global.tls.enabled) .Values.global.broker.port }}
      prefetchCount: {{ default 1 .Values.global.broker.prefetchCount }}
      password: {{ required "MQ password is required" (include "mqPassMapper" .) }}
      queue: {{ default "mapping_stream" .Values.global.sync.brokerQueue }}
    {{- if ne "" ( default "" .Values.global.broker.serverName ) }}
      serverName: {{.Values.global.broker.serverName }}
    {{- end }}
      ssl: {{ .Values.global.tls.enabled }}
      user: {{ required "MQ user is required" (include "mqUserMapper" .) }}
    {{- if .Values.global.tls.enabled }}
      verifyPeer: {{ .Values.global.broker.verifyPeer }}
    {{- end }}
      vhost: {{ include "brokerVhost" . }}
    c4gh:
      filePath: {{ template "c4ghPath" . }}/{{ (first .Values.global.c4gh.privateKeys).keyName }}
      passphrase: {{ (first .Values.global.c4gh.privateKeys).passphrase }}
      syncPubKeyPath: {{ template "c4ghPath" . }}/{{ required "remote sync public c4gh key is missing" .Values.global.c4gh.syncPubKey }}
    db:
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
    {{- end }}
      host: {{ .Values.global.db.host }}
      database: {{ .Values.global.db.name }}
      password: {{ required "MQ password is required" (include "dbPassMapper" .) }}
      port: {{ .Values.global.db.port }}
      sslmode: {{ ternary .Values.global.db.sslMode "disable" .Values.global.tls.enabled }}
      user: {{ required "DB user is required" (include "dbUserMapper" .) }}
    log:
      format: {{ .Values.global.log.format }}
      level: {{ .Values.global.log.level }}
    sync:
      centerPrefix: {{ .Values.global.sync.centerPrefix }}
      destination:
        type: s3
        url: {{ required "S3 sync archive URL missing" .Values.global.sync.destination.url }}
      {{- if not (empty .Values.global.sync.destination.port) }}
        port: {{ .Values.global.sync.destination.port }}
      {{- end }}
      {{- if not (empty .Values.global.sync.destination.readypath) }}
        readypath: {{ .Values.global.sync.destination.readypath }}
      {{- end }}
        accessKey: {{ required "Accesskey required for sync destination" .Values.global.sync.destination.accessKey }}
        secretKey: {{ required "SecretKey required for sync destination" .Values.global.sync.destination.secretKey }}
        bucket: {{ required "S3 sync destination bucket missing" .Values.global.sync.destination.bucket }}
        region: {{ default "us-east-1" .Values.global.sync.destination.region }}
      remote:
        host: {{ required "remote sync API host is required" .Values.global.sync.remote.host }}
        password: {{ required "remote sync API password is required" .Values.global.sync.remote.password }}
      {{- if not (empty .Values.global.sync.remote.port) }}
        port: {{ .Values.global.sync.remote.port }}
      {{- end }}
        user: {{ required "remote sync API user is required" .Values.global.sync.remote.user }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
